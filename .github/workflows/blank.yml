{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "012c100b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Шанс вытянуть туз в одной из четырех карт: 27.458 %\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "# Задача 1\n",
    "# Количество вытягиваемых карт\n",
    "n_elem = 4\n",
    "\n",
    "# Количество испытаний\n",
    "n = 1000000\n",
    "\n",
    "# Счетчик попаданий туза в вытянутых картах\n",
    "i = 0\n",
    "\n",
    "for _ in range(n):\n",
    "    # В одной из четырех мастей есть туз, следовательно\n",
    "    # достаточно одной карты из 13 по 4 попытки за раз\n",
    "    c = np.random.randint(1, 14, n_elem)\n",
    "    # Если туз есть в списке карт, прибавляем к счетчику 1\n",
    "    if 13 in c:\n",
    "        i += 1\n",
    "# Разделим на общее количество испытаний\n",
    "print(\"Шанс вытянуть туз в одной из четырех карт: \" + f\"{round((i / n) * 100, 3)} %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "fad703d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Шанс вытянуть 3 знакомых билета: 57.91 %\n"
     ]
    }
   ],
   "source": [
    "# Задача 2\n",
    "import numpy as np\n",
    "\n",
    "# Вытягиваемые билеты\n",
    "n_elem = 3\n",
    "\n",
    "# Знание студента\n",
    "knowledge_list = np.arange(1, 51)\n",
    "\n",
    "# Количество испытаний\n",
    "n = 500000\n",
    "\n",
    "# Количество наборов по условию\n",
    "ok = 0\n",
    "\n",
    "# Счетчик\n",
    "for _ in range(p):\n",
    "    ticket_list = np.random.randint(1, 61, size=n_elem)\n",
    "    \n",
    "    # Если все вытянутые элементы знает студент\n",
    "    result = all(x in knowledge_list for x in ticket_list)\n",
    "    if result:\n",
    "        ok += 1\n",
    "print(\"Шанс вытянуть 3 знакомых билета: \" + \n",
    "      f\"{round((ok / n) * 100, 2)} %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "aeb4f7e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Шанс вытянуть 2 знакомых билета из 3: 92.58 %\n"
     ]
    }
   ],
   "source": [
    "# Задача 3\n",
    "import numpy as np\n",
    "\n",
    "# Вытягиваемые билеты\n",
    "n_elem = 3\n",
    "\n",
    "# Знание студента\n",
    "knowledge_list = np.arange(1, 51)\n",
    "\n",
    "# Количество испытаний\n",
    "n = 500000\n",
    "\n",
    "# Количество наборов по условию\n",
    "ok = 0\n",
    "\n",
    "# Счетчик\n",
    "for _ in range(n):\n",
    "    ticket_list = np.random.randint(1, 61, size=n_elem)\n",
    "    \n",
    "    result = [elem for elem in ticket_list if elem in knowledge_list]\n",
    "    if len(result) >= 2:\n",
    "        ok += 1\n",
    "        \n",
    "print(\"Шанс вытянуть 2 знакомых билета из 3: \" + \n",
    "      f\"{round((ok / n) * 100, 2)} %\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b2fccb48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0005\n"
     ]
    }
   ],
   "source": [
    "# Задача 4\n",
    "import numpy as np\n",
    "\n",
    "# Вероятность поражения населения редкой болезнью\n",
    "ds = 0.001\n",
    "\n",
    "# Вероятность положительного теста\n",
    "t = 0.5\n",
    "\n",
    "# Вероятность верного определения тестом\n",
    "x = 0.99\n",
    "\n",
    "# Я болен, тест оказался положительным и был верен\n",
    "a1 = ds * t * x\n",
    "\n",
    "# Я болен, тест оказался отрицательным и ошибся\n",
    "a2 = ds * t * (1-x)\n",
    "\n",
    "a = a1 + a2\n",
    "print(round(a, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1605b216",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
